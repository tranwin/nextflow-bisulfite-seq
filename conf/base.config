/*
========================================================================================
    Bsbolt Nextflow base config file
========================================================================================
----------------------------------------------------------------------------------------
*/
// Function to ensure that resource requirements don't go beyond a maximum limit
def checkMax(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.maxMemory as nextflow.util.MemoryUnit) == 1)
        return params.maxMemory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.maxMemory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.maxTime as nextflow.util.Duration) == 1)
        return params.maxTime as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.maxTime}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.maxCpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.maxCpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
process {
  // The defaults for all processes
  cpus          = { checkMax( 1 * task.attempt, 'cpus' ) }
  memory        = { checkMax( 3.GB * task.attempt, 'memory' ) }
  time          = { checkMax( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries    = 1
  maxErrors     = '-1'

  shell         = ['/bin/bash', '-euo', 'pipefail']

  withLabel:processLow {
    cpus        = { checkMax( 2 * task.attempt, 'cpus' ) }
    memory      = { checkMax( 4.GB * task.attempt, 'memory' ) }
    time        = { checkMax( 4.h * task.attempt, 'time' ) }
  }
  withLabel:processMedium {
    cpus        = { checkMax( 4 * task.attempt, 'cpus' ) }
    memory      = { checkMax( 8.GB * task.attempt, 'memory' ) }
    time        = { checkMax( 8.h * task.attempt, 'time' ) }
  }
  withLabel:processHigh {
    cpus        = { checkMax( 8 * task.attempt, 'cpus' ) }
    memory      = { checkMax( 16.GB * task.attempt, 'memory' ) }
    time        = { checkMax( 24.h * task.attempt, 'time' ) }
  }
} 

